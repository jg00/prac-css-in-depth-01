.container {
  margin-top: 20px;
  display: grid;
  height: 800px;
  /* width: 800px; */
  /* grid-template-columns: 200px 150px 20%; */
  /* grid-template-columns: 200px 150px 20% 1fr; */
  /* grid-template-columns: 200px 2fr 20% 1fr; */
  /* grid-template-columns: 200px 5rem 20% auto; */

  /* Replace with line names but reference in the element (ex: el1) with auto-generated line occurrence numbers. */
  /* grid-template-columns: repeat(4, 25%); */
  grid-template-columns: [hd-start] repeat(4, [col-start] 20% [col-end]) [hd-end];

  /* grid-template-rows: 5rem 2rem; */
  /* grid-template-rows: 5rem auto; */

  /* grid-template-rows: 5rem minmax(10px, auto) 100px; */
  grid-template-rows:
    /* [row-1-start] 5rem [row-1-end row-2-start]minmax(10px, auto) */
    /* [hd-start] 5rem [hd-end row-2-start]minmax(10px, auto) */
    [hd-start] 5rem [hd-end row-2-start]minmax(10px, 20rem)
    [row-2-end row-3-start] 100px [row-3-end];

  /* Gaps (gutters) used instead of margins */
  /* grid-column-gap: 20px; */
  /* grid-row-gap: 10px; */
  /* grid-gap: row column */
  /* grid-gap: 10px 20px; */
  grid-gap: 10px; /* all around */

  /* Named template areas
      1 You still need to define 
          grid-template-columns
          grid-template-rows
      2 You define your named template areas
          grid-template-areas 
      3 Now for child grid elements you give them a name you also use in your named template areas
          grid-area
          - grid-area can be used for shorthand when using grid lines
          - now we use grid-area to provide a name
  */

  grid-template-areas:
    "header header header header"
    ".      side      main   main  "
    "footer footer footer footer";

  /* Grid element positioning */
  /* justify-items: center; */
  justify-items: stretch;
  align-items: stretch;

  /* Positioning of entire grid content within the given width and height. (This is not moving the grid using absolute or fixed position. */
  /* justify-content: center; */
  /* align-content: end; */

  border: 5px dashed green;
}

/* 40rem = 640px - Up to 40rem we want to have additional row for smaller devices. Still original four template columns. */
@media (max-width: 40rem) {
  .container {
    grid-template-rows:
      [hd-start] 5rem
      [hd-end row-2-start] minmax(10px, 20rem)
      [row-2-end row-3-start] 150px
      [row-3-end row-4-start] 100px [row-4-end];

    grid-template-areas:
      "header header header header"
      "main main main main"
      "side side side side"
      "footer footer footer footer";
  }
}

.el1 {
  background: rgba(255, 154, 72, 0.5);

  /* Use auto generated grid line names */
  /* grid-column: 2/3; */
  /* grid-column: col-start 2 / col-end 2; */
  grid-area: side;
}

.el2 {
  background: rgba(255, 0, 0, 0.5);

  /* shorthand */
  /* grid-column-start: 1; */
  /* grid-column-end: -1; */
  /* grid-column: 1 / -1; */

  /* Default behavior is for element to look to fill space to the right and then down unless we explicitly specify position.
     Watch our for overlap behavior.
     Watch out for order of elements on the DOM when overlapping occurs.
  */
  /* grid-row-start: 2; */
  /* grid-row-start: row-2-start; */
  /* grid-row-end: span 1; */
  /* grid-row: row-2-start / span 1; */

  /* Replaced above with named element area */
  /* grid-column: 1 / -1; */
  /* grid-row: row-2-start / span 1; */
  grid-area: main;
  z-index: 10;

  /* Specific element positioning */
  /* justify-self: center; */
  /* align-self: center; */
}

.el3 {
  background: rgba(0, 128, 0, 0.5);
  /* grid-column-start: 2; */
  /* grid-column-end: span 3; */

  /* grid-row-start: 1; */
  /* grid-row-end: 3; */
  /* grid-row-start: row-1-start; */
  /* grid-row-end: row-2-end; */

  /* Shorthand for all properties - grid-area: rowstart / columnstart / rowend / columnend */
  /* grid-area: row-1-start / 2 / row-2-end / span 3; */

  /* Instead of specifying the shorthand and using lines to define the element position we provide a named area.
     Having this property without the grid-template-areas in the .container breaks the grid layout 
  */
  /* grid-area: header; */
  /* grid-column: hd-start 1 / hd-end 1; */
  /* grid-row: hd-start 1 / hd-end 1; */
  grid-area: hd;
}

.el4 {
  background: rgba(0, 4, 255, 0.5);

  /* Example of forcing overlap by explicitly defining rows and columns for element position. */
  /* grid-column: 2 / -1; */
  /* grid-row: 2 / span 1; */

  grid-area: footer;
}
