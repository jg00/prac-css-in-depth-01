body {
  margin: 0;
}

.container {
  margin: 20px;
  height: 500px;
  /* width: 1000px; */

  display: grid;

  /* grid-template-columns: 200px 150px 20%; */
  /* grid-template-rows: 5rem 2.5rem; */

  /* grid-template-columns: 200px 2fr 20% 1fr; */
  /* grid-template-rows: 5rem 2.5rem; */

  /* If you want last available column/row to fill remaining space. */
  /* grid-template-columns: 200px 2fr 20% 1fr; */ /* for columns - will fill any remaining space */
  /* grid-template-rows: 5rem auto; */ /* for rows - will resize to height of content unless a height was set. */

  /* grid-template-columns: 200px 5rem 20% auto; */ /* for columns - will fill any remaining space */
  /* grid-template-rows: 5rem auto; */ /* for rows - will resize to height of content unless a height was set. */

  /* grid-template-columns: repeat(4, 25%); */
  /* grid-template-rows: 5rem auto; */

  /* grid-template-columns: repeat(4, 25%); */
  /* grid-template-rows: 5rem minmax(10px, 200px) 100px; */

  /* grid-template-columns: repeat(4, 25%); */
  /* grid-template-rows: 5rem minmax(10px, auto) 100px; */

  /* grid-template-columns: repeat(4, [col-start] 25% [col-end]);
  grid-template-rows:
    [row-1-start] 5rem [row-1-end row-2-start]
    minmax(10px, auto) [row-2-end row-3-start]
    100px [row-3-end]; */

  /* Automatically generated grid areas using prefix"-start" to prefix"-end" */
  grid-template-columns: [hd-start] repeat(4, [col-start] 25% [col-end]) [hd-end];
  grid-template-rows:
    [hd-start] 5rem [hd-end row-2-start]
    minmax(10px, auto) [row-2-end row-3-start]
    100px [row-3-end];

  /* grid-column-gap: 20px;
  grid-row-gap: 10px; */

  /* grid-gap: grid-row-gap grid-column-gap */
  /* grid-gap: 10px 20px; */
  grid-gap: 10px;

  /* Named template area definition */
  grid-template-areas:
    "header header header header"
    ". . main main"
    "footer footer footer footer ";
}

.el1 {
  background: rgba(255, 154, 72, 0.5);
  grid-column: col-start 2 / col-end 2;
}

.el2 {
  background: rgba(255, 0, 0, 0.5);

  /* Extend element accross. In this scenario, we are not explicitly setting the 
  starting row position. So the behavior is the grid will try to avoid overlapping. */
  /* grid-column-start: 1;
  grid-column-end: -1; */

  /* In this scenario we are explicitly overlaping elements.  Also DOM order dictates which element is on top unless z-index specified. */
  /* grid-column-start: 1;
  grid-column-end: -1;
  grid-row-start: 2;
  grid-row-end: span 1;  >> This is default an can be commented out.
  z-index: 10; */

  /* grid-column-start: 1;
  grid-column-end: -1; 
  grid-row-start: row-2-start;
  grid-row-end: span 1;  
  z-index: 10; */

  /* grid-column: 1 / -1;
  grid-row: row-2-start / span 1;
  z-index: 10; */

  grid-area: main;
  z-index: 10;
}

.el3 {
  background: rgba(0, 128, 0, 0.5);

  /* grid-column-start: 3;
  grid-column-end: 5;
  grid-row-start: 1;
  grid-row-end: 3; */

  /* grid-column-start: 3;
  grid-column-end: span 2;
  grid-row-start: 1;
  grid-row-end: 3; */

  /* grid-column-start: 2;
  grid-column-end: span 3;
  grid-row-start: 1;
  grid-row-end: 3; */

  /* grid-column-start: 2;
  grid-column-end: span 3;
  grid-row-start: row-1-start;
  grid-row-end: row-2-end; */

  /* grid-area: grid-row-start / grid-column-start / grid-row-end / grid-column-end */
  /* grid-area: row-1-start / 2 / row-2-end / span 3; */

  /* Named template area - defined at container parent instead */
  /* Important behavior - With grid-area, DOM order is 'not' respected anymore so later elements in the DOM may be adjusted before another earlier element. */
  /* Unless we also apply grid-area to el4 */
  /* grid-area: header; */

  /* Automatically generated grid areas using prefix"-start" to prefix"-end" */
  grid-area: hd;
}

.el4 {
  background: rgba(0, 4, 255, 0.5);
  grid-area: footer;
}
