html {
  background: #b3b3b3;
  padding: 15px;
  border: 5px solid white;
  margin: 15px;
  height: 2000px;

  /* 3c Passed on to the html element. */
  overflow: hidden;
}

body {
  background: #fa923f;
  padding: 20px;
  border: 5px solid black;
  margin: 0;

  /* 3b Note that due to a default behavior of CSS. If you apply the "overflow: hidden" property to the
  body element, this will simply be passed on to the html element. To get this to work
  you need 'oveflow: hidden' on both body and html. */
  overflow: hidden;
}

.parent {
  background: white;
  padding: 20px;
  border: 5px solid black;
  margin: 0;

  /* 3a Let's now say our parent is relatively positioned element and add
  top: 200px so the parent is now partially out of it's parent element
  'body'.  Note that if we add "overflow: hidden" to the body, it will not work.
  You will need to also add "overflow: hidden" to the html.
   */
  position: relative;
  top: 200px;

  /* 2b Tip to hide element as it moves outside of it's parent. */
  /* overflow: hidden; */
}

.parent div {
  background: rgb(105, 105, 109);
  color: white;
  padding: 10px;
  border: 5px solid black;
  margin: 10px;
}

/* 2a Relative positioning context is the element itself.
At the same time the element is not taken out of the document flow. 
Note that you can use overflow: hidden; in it's parent to hide the child as 
it moves outside of it's parent. */
/*
.parent .child-1 {
  position: relative;
  top: 175px;
  left: 300px;
}
*/

/* 1 For fixed and absolute, the elements are taken out of the document flow.  For relative it is not.
  Example for fixed navigation. Fixed is related to viewport.  Absolute is relative to it's closest ancestor which has the position property applied like relative. */
/*
.parent .child-1 {
  position: fixed;
  width: 400px;
  top: 0px;
  left: 0px;
  margin: 0;
  width: 100%;
  box-sizing: border-box;
}
*/
